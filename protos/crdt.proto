syntax = "proto3";

package crdt;

//
// The CRDT service describes an interface for creating and retrieving stored
// data from the datastore. Types are specified by semantic URI identifiers,
// like: crdt:gset, crdt:2pset, crdt:gcounter
//
service CRDT {
    // Create a new data set in internal datastore.
    rpc Create(CreateRequest) returns (CreateResponse) {}

    // Attach to an existing data set.
    rpc Attach(AttachRequest) returns (AttachResponse) {}

    // Detach ReferenceId reference from internal datastore.
    rpc Detach(DetachRequest) returns (DetachResponse) {}

    // Subscribe to data set modifications.
    rpc Subscribe(SubscribeRequest) returns (stream Notification) {}

    // Commit resource to persistent storage.
    rpc Commit(CommitRequest) returns (CommitResponse) {}

    // Test Equality of two resources by reference.
    rpc Equals(EqualsRequest) returns (EqualsResponse) {}

    // Merge two references with matching datatype.
    rpc Merge(MergeRequest) returns (MergeResponse) {}

    // Clone a reference into a new resource.
    rpc Clone(CloneRequest) returns (CloneResponse) {}

    // Returns a list of supported data types.
    rpc SupportedTypes(EmptyMessage) returns (SupportedTypesResponse) {}
    rpc IsSupportedType(TypeMessage) returns (BooleanResponse) {}

    // Returns a list of supported storage backends.
    rpc SupportedStorageTypes(EmptyMessage) returns (SupportedStorageTypesResponse) {}
    rpc IsSupportedStorageType(TypeMessage) returns (BooleanResponse) {}

    // Supported crypto methods.
    rpc SupportedCryptoMethods(EmptyMessage) returns (SupportedCryptoMethodsResponse) {}
    rpc IsSupportedCryptoMethod(TypeMessage) returns (BooleanResponse) {}
}

message EmptyMessage {}

message BooleanResponse {
    bool value = 1;
}

message Status {
    bool   success   = 1;
    string errorType = 2; // Error Type specification URI
}

message TypeMessage {
    string type = 1; // Type specification URI.
}

message ResourceObject {
    string referenceId = 1; // Datastore reference Id.
    bytes  object = 2;
}

message CreateRequest {
    string resourceType = 1; // Type specification URI.
    string storageId = 2;
    string cryptoId = 3;
}

message CreateResponse {
    Status status      = 1;
    string resourceId  = 2;
    string resourceKey = 3;
}

message AttachRequest {
    string resourceId  = 1; // Presumably IPFS hash
    string resourceKey = 2;
}

message AttachResponse {
    Status status      = 1;
    string referenceId = 2; // Client specific pointer to dataset.
}

message DetachRequest {
    string referenceId = 1; // Client specific pointer to dataset.
}

message DetachResponse {
    Status status = 1;
}

message SubscribeRequest {
    string referenceId = 1;
}

message Notification {
    enum EventType {
        Inserted = 0;
        Removed  = 1;
    }

    EventType type = 1;
    ResourceObject object = 2;
}

message CommitRequest {
    string referenceId = 1;
}

message CommitResponse {
    Status status = 1;
}

message EqualsRequest {
    string referenceId = 1;
    string otherReferenceId = 2;
}

message EqualsResponse {
    Status status = 1;
    bool   result = 2;
}

message MergeRequest {
    string referenceId = 1;
    string otherReferenceId = 2;
}

message MergeResponse {
    Status status = 1;
}

message CloneRequest {
    string referenceId = 1;
}

message CloneResponse {
    Status status = 1;
    string resourceId = 2; // New ResourceId
    string resourceKey = 3;
}

message SupportedTypesResponse {
    repeated TypeMessage types = 1;
}

message SupportedStorageTypesResponse {
    repeated TypeMessage types = 1;
}

message SupportedCryptoMethodsResponse {
    repeated TypeMessage types = 1;
}

//
// Set DataType service definitions
//
service GrowOnlySet {
    rpc List(SetListRequest) returns (stream ResourceObject) {}
    rpc Insert(SetInsertRequest) returns (SetInsertResponse) {}
    rpc Length(SetLengthRequest) returns (SetLengthResponse) {}
    rpc Contains(SetContainsRequest) returns (SetContainsResponse) {}
}

service TwoPhaseSet {
    rpc List(SetListRequest) returns (stream ResourceObject) {}
    rpc Insert(SetInsertRequest) returns (SetInsertResponse) {}
    rpc Remove(SetRemoveRequest) returns (SetRemoveResponse) {}
    rpc Length(SetLengthRequest) returns (SetLengthResponse) {}
    rpc Contains(SetContainsRequest) returns (SetContainsResponse) {}
}

message SetListRequest {
    string referenceId = 1;
}

message SetInsertRequest {
    ResourceObject object = 1;
}

message SetInsertResponse {
    Status status = 1;
}

message SetRemoveRequest {
    ResourceObject object = 1;
}

message SetRemoveResponse {
    Status status = 1;
}

message SetLengthRequest {
    string referenceId = 1;
}

message SetLengthResponse {
    Status status = 1;
    uint64 length = 2;
}

message SetContainsRequest {
    ResourceObject object = 1;
}

message SetContainsResponse {
    Status status = 1;
    bool   result = 2;
}

