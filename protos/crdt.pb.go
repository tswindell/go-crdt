// Code generated by protoc-gen-go.
// source: crdt.proto
// DO NOT EDIT!

/*
Package crdt is a generated protocol buffer package.

It is generated from these files:
	crdt.proto

It has these top-level messages:
	EmptyMessage
	BooleanMessage
	SetIdMessage
	SetIdPairMessage
	ObjectMessage
	ObjectRequest
	StatusResponse
*/
package crdt

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()         { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()    {}

type BooleanMessage struct {
	Value bool `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *BooleanMessage) Reset()         { *m = BooleanMessage{} }
func (m *BooleanMessage) String() string { return proto.CompactTextString(m) }
func (*BooleanMessage) ProtoMessage()    {}

type SetIdMessage struct {
	SetId string `protobuf:"bytes,1,opt,name=setId" json:"setId,omitempty"`
}

func (m *SetIdMessage) Reset()         { *m = SetIdMessage{} }
func (m *SetIdMessage) String() string { return proto.CompactTextString(m) }
func (*SetIdMessage) ProtoMessage()    {}

type SetIdPairMessage struct {
	SetId1 string `protobuf:"bytes,1,opt,name=setId1" json:"setId1,omitempty"`
	SetId2 string `protobuf:"bytes,2,opt,name=setId2" json:"setId2,omitempty"`
}

func (m *SetIdPairMessage) Reset()         { *m = SetIdPairMessage{} }
func (m *SetIdPairMessage) String() string { return proto.CompactTextString(m) }
func (*SetIdPairMessage) ProtoMessage()    {}

type ObjectMessage struct {
	Object string `protobuf:"bytes,1,opt,name=object" json:"object,omitempty"`
}

func (m *ObjectMessage) Reset()         { *m = ObjectMessage{} }
func (m *ObjectMessage) String() string { return proto.CompactTextString(m) }
func (*ObjectMessage) ProtoMessage()    {}

type ObjectRequest struct {
	SetId  string `protobuf:"bytes,1,opt,name=setId" json:"setId,omitempty"`
	Object string `protobuf:"bytes,2,opt,name=object" json:"object,omitempty"`
}

func (m *ObjectRequest) Reset()         { *m = ObjectRequest{} }
func (m *ObjectRequest) String() string { return proto.CompactTextString(m) }
func (*ObjectRequest) ProtoMessage()    {}

type StatusResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Mesg    string `protobuf:"bytes,2,opt,name=mesg" json:"mesg,omitempty"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for CRDT service

type CRDTClient interface {
	// Managerial Operations
	CreateSet(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*SetIdMessage, error)
	DeleteSet(ctx context.Context, in *SetIdMessage, opts ...grpc.CallOption) (*StatusResponse, error)
	ListSets(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (CRDT_ListSetsClient, error)
	// Set Operations
	GetObjects(ctx context.Context, in *SetIdMessage, opts ...grpc.CallOption) (CRDT_GetObjectsClient, error)
	AddObject(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	RemoveObject(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Contains(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*BooleanMessage, error)
	// Set-on-Set Operations
	Equals(ctx context.Context, in *SetIdPairMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
	Merge(ctx context.Context, in *SetIdPairMessage, opts ...grpc.CallOption) (*StatusResponse, error)
	Clone(ctx context.Context, in *SetIdMessage, opts ...grpc.CallOption) (*SetIdMessage, error)
}

type cRDTClient struct {
	cc *grpc.ClientConn
}

func NewCRDTClient(cc *grpc.ClientConn) CRDTClient {
	return &cRDTClient{cc}
}

func (c *cRDTClient) CreateSet(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*SetIdMessage, error) {
	out := new(SetIdMessage)
	err := grpc.Invoke(ctx, "/crdt.CRDT/CreateSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRDTClient) DeleteSet(ctx context.Context, in *SetIdMessage, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/crdt.CRDT/DeleteSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRDTClient) ListSets(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (CRDT_ListSetsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CRDT_serviceDesc.Streams[0], c.cc, "/crdt.CRDT/ListSets", opts...)
	if err != nil {
		return nil, err
	}
	x := &cRDTListSetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CRDT_ListSetsClient interface {
	Recv() (*SetIdMessage, error)
	grpc.ClientStream
}

type cRDTListSetsClient struct {
	grpc.ClientStream
}

func (x *cRDTListSetsClient) Recv() (*SetIdMessage, error) {
	m := new(SetIdMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cRDTClient) GetObjects(ctx context.Context, in *SetIdMessage, opts ...grpc.CallOption) (CRDT_GetObjectsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CRDT_serviceDesc.Streams[1], c.cc, "/crdt.CRDT/GetObjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &cRDTGetObjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CRDT_GetObjectsClient interface {
	Recv() (*ObjectMessage, error)
	grpc.ClientStream
}

type cRDTGetObjectsClient struct {
	grpc.ClientStream
}

func (x *cRDTGetObjectsClient) Recv() (*ObjectMessage, error) {
	m := new(ObjectMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cRDTClient) AddObject(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/crdt.CRDT/AddObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRDTClient) RemoveObject(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/crdt.CRDT/RemoveObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRDTClient) Contains(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := grpc.Invoke(ctx, "/crdt.CRDT/Contains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRDTClient) Equals(ctx context.Context, in *SetIdPairMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := grpc.Invoke(ctx, "/crdt.CRDT/Equals", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRDTClient) Merge(ctx context.Context, in *SetIdPairMessage, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/crdt.CRDT/Merge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRDTClient) Clone(ctx context.Context, in *SetIdMessage, opts ...grpc.CallOption) (*SetIdMessage, error) {
	out := new(SetIdMessage)
	err := grpc.Invoke(ctx, "/crdt.CRDT/Clone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CRDT service

type CRDTServer interface {
	// Managerial Operations
	CreateSet(context.Context, *EmptyMessage) (*SetIdMessage, error)
	DeleteSet(context.Context, *SetIdMessage) (*StatusResponse, error)
	ListSets(*EmptyMessage, CRDT_ListSetsServer) error
	// Set Operations
	GetObjects(*SetIdMessage, CRDT_GetObjectsServer) error
	AddObject(context.Context, *ObjectRequest) (*StatusResponse, error)
	RemoveObject(context.Context, *ObjectRequest) (*StatusResponse, error)
	Contains(context.Context, *ObjectRequest) (*BooleanMessage, error)
	// Set-on-Set Operations
	Equals(context.Context, *SetIdPairMessage) (*BooleanMessage, error)
	Merge(context.Context, *SetIdPairMessage) (*StatusResponse, error)
	Clone(context.Context, *SetIdMessage) (*SetIdMessage, error)
}

func RegisterCRDTServer(s *grpc.Server, srv CRDTServer) {
	s.RegisterService(&_CRDT_serviceDesc, srv)
}

func _CRDT_CreateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CRDTServer).CreateSet(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CRDT_DeleteSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SetIdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CRDTServer).DeleteSet(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CRDT_ListSets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CRDTServer).ListSets(m, &cRDTListSetsServer{stream})
}

type CRDT_ListSetsServer interface {
	Send(*SetIdMessage) error
	grpc.ServerStream
}

type cRDTListSetsServer struct {
	grpc.ServerStream
}

func (x *cRDTListSetsServer) Send(m *SetIdMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CRDT_GetObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SetIdMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CRDTServer).GetObjects(m, &cRDTGetObjectsServer{stream})
}

type CRDT_GetObjectsServer interface {
	Send(*ObjectMessage) error
	grpc.ServerStream
}

type cRDTGetObjectsServer struct {
	grpc.ServerStream
}

func (x *cRDTGetObjectsServer) Send(m *ObjectMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CRDT_AddObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CRDTServer).AddObject(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CRDT_RemoveObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CRDTServer).RemoveObject(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CRDT_Contains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CRDTServer).Contains(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CRDT_Equals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SetIdPairMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CRDTServer).Equals(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CRDT_Merge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SetIdPairMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CRDTServer).Merge(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CRDT_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SetIdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CRDTServer).Clone(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _CRDT_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crdt.CRDT",
	HandlerType: (*CRDTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSet",
			Handler:    _CRDT_CreateSet_Handler,
		},
		{
			MethodName: "DeleteSet",
			Handler:    _CRDT_DeleteSet_Handler,
		},
		{
			MethodName: "AddObject",
			Handler:    _CRDT_AddObject_Handler,
		},
		{
			MethodName: "RemoveObject",
			Handler:    _CRDT_RemoveObject_Handler,
		},
		{
			MethodName: "Contains",
			Handler:    _CRDT_Contains_Handler,
		},
		{
			MethodName: "Equals",
			Handler:    _CRDT_Equals_Handler,
		},
		{
			MethodName: "Merge",
			Handler:    _CRDT_Merge_Handler,
		},
		{
			MethodName: "Clone",
			Handler:    _CRDT_Clone_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListSets",
			Handler:       _CRDT_ListSets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetObjects",
			Handler:       _CRDT_GetObjects_Handler,
			ServerStreams: true,
		},
	},
}
